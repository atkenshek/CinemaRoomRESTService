type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/CinemaManager.java
  visible: true
  text: |-
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.Data;
    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.List;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;

    @Data
    @Service
    public class CinemaManager {
        @JsonProperty("total_rows")
        private int totalRows;

        @JsonProperty("total_columns")
        private int totalColumns;

        @JsonProperty("available_seats")
        private List<Seat> availableSeats;

        @JsonIgnore
        private List<Seat> takenSeats = new ArrayList<>();

        public CinemaManager() {
            totalColumns = 9;
            totalRows = 9;
            availableSeats = IntStream.rangeClosed(1, 9)
                    .mapToObj(i -> IntStream.rangeClosed(1, 9)
                            .mapToObj(j -> {
                                int price = i <= 4 ? 10 : 8;
                                return new Seat(i, j, price);
                            })
                            .collect(Collectors.toList())).flatMap(Collection::stream)
                    .collect(Collectors.toList());
        }

        public Seat handlePurchaseRequest(PurchaseRequest request) {
            if(request.getRow() > 9 || request.getRow() < 1 || request.getColumn() > 9
                    || request.getColumn() < 1 ) {
                throw new PurchasedException("The number of a row or a column is out of bounds!");
            }
            Seat purchasedSeat = availableSeats.stream()
                    .filter(seat -> seat.getRow() == request.getRow() && seat.getColumn() == request.getColumn())
                    .findFirst().orElseThrow(() -> new PurchasedException("The ticket has been already purchased!"));
            availableSeats.remove(purchasedSeat);
            takenSeats.add(purchasedSeat);
            return purchasedSeat;
        }
    }
  learner_created: true
- name: src/cinema/PurchasedException.java
  visible: true
  text: |
    package cinema;

    import lombok.AllArgsConstructor;
    import lombok.Getter;

    @AllArgsConstructor
    @Getter
    public class PurchasedException extends RuntimeException{
        private String error;
    }
  learner_created: true
- name: src/cinema/Controller/UserService.java
  visible: true
  learner_created: true
- name: src/cinema/Entities/Cinema.java
  visible: true
  learner_created: true
- name: src/cinema/Entities/Seat.java
  visible: true
  learner_created: true
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;


    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.EqualsAndHashCode;

    @AllArgsConstructor
    @Data
    @EqualsAndHashCode
    public class Seat {
        private int row;
        private int column;
        private int price;
    }
  learner_created: true
- name: src/cinema/RestResponseEntityException.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    import java.util.Map;

    @ControllerAdvice
    public class RestResponseEntityException extends ResponseEntityExceptionHandler {

        @ExceptionHandler(PurchasedException.class)
        public ResponseEntity<?> handlePurchasedException(PurchasedException exception) {
            return new ResponseEntity<>(Map.of("error", exception.getError()), HttpStatus.BAD_REQUEST);
        }

    }
  learner_created: true
- name: src/cinema/CinemaRestController.java
  visible: true
  text: |-
    package cinema;

    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import javax.annotation.Resource;

    @RestController
    public class CinemaRestController {
        @Resource
        private CinemaManager cinemaManager;

        @GetMapping("/seats")
        public CinemaManager getSeats() {
            return cinemaManager;
        }
        @PostMapping("/purchase")
        public Seat purchaseSeat(@RequestBody PurchaseRequest request) {
            return cinemaManager.handlePurchaseRequest(request);
        }

    }
  learner_created: true
- name: src/cinema/Controller/TaskController.java
  visible: true
  learner_created: true
- name: src/cinema/PurchaseRequest.java
  visible: true
  text: |-
    package cinema;

    import lombok.AllArgsConstructor;
    import lombok.EqualsAndHashCode;
    import lombok.Getter;

    @AllArgsConstructor
    @Getter
    @EqualsAndHashCode
    public class PurchaseRequest {
        private int row;
        private int column;
    }
  learner_created: true
- name: src/cinema/requests/RequestException.java
  visible: true
  text: |-
    package cinema.requests;

    public final class RequestException extends RuntimeException {
        public RequestException(String error) {
            super(error);
        }
    }
  learner_created: true
- name: src/cinema/requests/ReturnResponse.java
  visible: true
  text: |-
    package cinema.requests;

    import cinema.Entities.Seat;

    public class ReturnResponse {

        private final Seat returned_ticket;

        public ReturnResponse(Seat returned_ticket) {
            this.returned_ticket = returned_ticket;
        }

        public Seat getReturned_ticket() {
            return returned_ticket;
        }
    }
  learner_created: true
- name: src/cinema/requests/StatsException.java
  visible: true
  learner_created: true
- name: src/cinema/requests/PurchaseRequest.java
  visible: true
  text: |-
    package cinema.requests;

    public final class PurchaseRequest {

        private int row;
        private int column;

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/requests/StatsResponse.java
  visible: true
  learner_created: true
- name: src/cinema/requests/ReturnRequest.java
  visible: true
  text: |-
    package cinema.requests;

    public final class ReturnRequest {

        private String token;

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }
    }
  learner_created: true
- name: src/cinema/requests/PurchaseResponse.java
  visible: true
  text: |-
    package cinema.requests;

    import cinema.Entities.Seat;

    public final class PurchaseResponse {

        private final String token;
        private final Seat ticket;

        public PurchaseResponse(String token, Seat ticket) {
            this.token = token;
            this.ticket = ticket;
        }

        public String getToken() {
            return token;
        }

        public Seat getTicket() {
            return ticket;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 28 Jan 2022 08:56:22 UTC
record: 3
